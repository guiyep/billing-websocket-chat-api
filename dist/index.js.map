{"version":3,"sources":["../src/index.js"],"names":["server","http","createServer","PORT","wss","WebSocket","Server","sendMessage","ws","data","accountId","name","result","JSON","stringify","console","log","send","getMessage","msg","parsedMessage","parse","broadcastMessage","sameOrigin","clients","forEach","client","readyState","OPEN","on","parseMessage","message","messageAdded","listen"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;;;AAEA,IAAMA,MAAM,GAAGC,iBAAKC,YAAL,EAAf;;AACA,IAAMC,IAAI,GAAG,IAAb;AAEA,IAAMC,GAAG,GAAG,IAAIC,eAAUC,MAAd,CAAqB;AAAEN,EAAAA,MAAM,EAANA;AAAF,CAArB,CAAZ;;AAEA,IAAMO,WAAW,GAAG,SAAdA,WAAc,CAACC,EAAD,EAAKC,IAAL,EAAWC,SAAX,EAAsBC,IAAtB,EAA+B;AACjD,MAAMC,MAAM,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEJ,IAAAA,SAAS,EAATA,SAAF;AAAaC,IAAAA,IAAI,EAAJA,IAAb;AAAmBF,IAAAA,IAAI,EAAJA;AAAnB,GAAf,CAAf;AACAM,EAAAA,OAAO,CAACC,GAAR,qBAAyBJ,MAAzB;AACAJ,EAAAA,EAAE,CAACS,IAAH,CAAQL,MAAR;AACD,CAJD;;AAMA,IAAMM,UAAU,GAAG,SAAbA,UAAa,CAACC,GAAD,EAAS;AAC1BJ,EAAAA,OAAO,CAACC,GAAR,sBAA0BG,GAA1B;AACA,MAAMC,aAAa,GAAGP,IAAI,CAACQ,KAAL,CAAWF,GAAX,CAAtB;AACA,SAAOC,aAAP;AACD,CAJD;;AAMA,IAAME,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACd,EAAD,EAAKC,IAAL,EAAWC,SAAX,EAAsBC,IAAtB,EAA4BY,UAA5B,EAA2C;AAClEnB,EAAAA,GAAG,CAACoB,OAAJ,CAAYC,OAAZ,CAAoB,UAACC,MAAD,EAAY;AAC9B,QAAI,CAACH,UAAU,IAAIG,MAAM,KAAKlB,EAA1B,KAAiCkB,MAAM,CAACC,UAAP,KAAsBtB,eAAUuB,IAArE,EAA2E;AACzEb,MAAAA,OAAO,CAACC,GAAR,uCAA2CN,SAA3C,cAAwDC,IAAxD;AACAJ,MAAAA,WAAW,CAACmB,MAAD,EAASjB,IAAT,EAAeC,SAAf,EAA0BC,IAA1B,CAAX;AACD;AACF,GALD;AAMD,CAPD;;AASAP,GAAG,CAACyB,EAAJ,CAAO,YAAP,EAAqB,UAACrB,EAAD,EAAQ;AAC3BO,EAAAA,OAAO,CAACC,GAAR,CAAY,oDAAZ;AAEAR,EAAAA,EAAE,CAACqB,EAAH,CAAM,SAAN,EAAiB,UAACV,GAAD,EAAS;AACxB,QAAIA,GAAJ,EAAS;AACP,UAAMW,YAAY,GAAGZ,UAAU,CAACC,GAAD,CAA/B;;AAEA,UAAIW,YAAY,CAACnB,IAAb,IAAqB,iBAAzB,EAA4C;AAC1C,YAAMD,SAAS,GAAGoB,YAAY,CAACC,OAA/B;AACAxB,QAAAA,WAAW,CAACC,EAAD,EAAK,qCAAsBE,SAAtB,CAAL,EAAuCA,SAAvC,EAAkD,mBAAlD,CAAX;AACD;;AAED,UAAIoB,YAAY,CAACnB,IAAb,IAAqB,yBAAzB,EAAoD;AAClDJ,QAAAA,WAAW,CAACC,EAAD,EAAK,wCAAL,EAAgC,EAAhC,EAAoC,mCAApC,CAAX;AACD;;AAED,UAAIsB,YAAY,CAACnB,IAAb,IAAqB,aAAzB,EAAwC;AACtC,YAAMD,UAAS,GAAGoB,YAAY,CAACpB,SAA/B;AACA,YAAMsB,YAAY,GAAG,0BAAWtB,UAAX,EAAsBoB,YAAtB,CAArB;AACAR,QAAAA,gBAAgB,CAACd,EAAD,EAAK,CAACwB,YAAD,CAAL,EAAqBtB,UAArB,EAAgC,mBAAhC,CAAhB;AACAY,QAAAA,gBAAgB,CAACd,EAAD,EAAK,wCAAL,EAAgC,EAAhC,EAAoC,mCAApC,EAAyE,IAAzE,CAAhB;AACD;AACF;AACF,GApBD;AAqBD,CAxBD;AA0BAR,MAAM,CAACiC,MAAP,CAAc9B,IAAd;AAEAY,OAAO,CAACC,GAAR","sourcesContent":["import WebSocket from 'ws';\nimport http from 'http';\nimport { addMessage, getAllMessagesForClient, getAllMessagesForUser } from './messages';\nimport messageTypes from './messagesTypes';\n\nconst server = http.createServer();\nconst PORT = 8080;\n\nconst wss = new WebSocket.Server({ server });\n\nconst sendMessage = (ws, data, accountId, name) => {\n  const result = JSON.stringify({ accountId, name, data });\n  console.log(`SENDING - ${result}`);\n  ws.send(result);\n};\n\nconst getMessage = (msg) => {\n  console.log(`RECEIVED - ${msg}`);\n  const parsedMessage = JSON.parse(msg);\n  return parsedMessage;\n};\n\nconst broadcastMessage = (ws, data, accountId, name, sameOrigin) => {\n  wss.clients.forEach((client) => {\n    if ((sameOrigin || client !== ws) && client.readyState === WebSocket.OPEN) {\n      console.log(`BROADCASTING - messaging to ${accountId} ${name}`);\n      sendMessage(client, data, accountId, name);\n    }\n  });\n};\n\nwss.on('connection', (ws) => {\n  console.log('CONNECTION - Someone is connected to the WEBSOCKET');\n\n  ws.on('message', (msg) => {\n    if (msg) {\n      const parseMessage = getMessage(msg);\n\n      if (parseMessage.name == 'CONNECT-ACCOUNT') {\n        const accountId = parseMessage.message;\n        sendMessage(ws, getAllMessagesForUser(accountId), accountId, 'ACCOUNT-CONNECTED');\n      }\n\n      if (parseMessage.name == 'GET-ALL-MESSAGES-CLIENT') {\n        sendMessage(ws, getAllMessagesForClient(), '', 'GET-ALL-MESSAGES-CLIENT-SUCCEEDED');\n      }\n\n      if (parseMessage.name == 'ADD-MESSAGE') {\n        const accountId = parseMessage.accountId;\n        const messageAdded = addMessage(accountId, parseMessage);\n        broadcastMessage(ws, [messageAdded], accountId, 'NEW-MESSAGE-ADDED');\n        broadcastMessage(ws, getAllMessagesForClient(), '', 'GET-ALL-MESSAGES-CLIENT-SUCCEEDED', true);\n      }\n    }\n  });\n});\n\nserver.listen(PORT);\n\nconsole.log(`listening ws://localhost:8080`);\n"],"file":"index.js"}