{"version":3,"sources":["../src/messages.js"],"names":["endOfConversationMessage","message","type","messageTypes","client","data","user","accountName","addMessage","createNewConversation","getAllMessagesForUser","accountId","concat","getAllMessagesForClient","Object","entries","reduce","acc","messages","push","map"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,wBAAwB,GAAG;AAC/BC,EAAAA,OAAO,EAAE,iCADsB;AAE/BC,EAAAA,IAAI,EAAEC,0BAAaC;AAFY,CAAjC;AAKA,IAAMC,IAAI,GAAG;AACX,2BAAyB,CACvB;AACEJ,IAAAA,OAAO,EAAE,wBADX;AAEEC,IAAAA,IAAI,EAAEC,0BAAaG,IAFrB;AAGEC,IAAAA,WAAW,EAAE;AAHf,GADuB,EAMvB;AACEN,IAAAA,OAAO,EAAE,wBADX;AAEEC,IAAAA,IAAI,EAAEC,0BAAaC,MAFrB;AAGEG,IAAAA,WAAW,EAAE;AAHf,GANuB;AADd,CAAb;;AAeO,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM,CAAE,CAA3B;;;;AAEA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,GAAM,CAAE,CAAtC;;;;AAEA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,SAAD,EAAe;AAClD,MAAI,CAACN,IAAI,CAACM,SAAD,CAAT,EAAsB;AACpB,WAAO,EAAP;AACD;;AAED,SAAON,IAAI,CAACM,SAAD,CAAJ,CAAgBC,MAAhB,CAAuBZ,wBAAvB,CAAP;AACD,CANM;;;;AAQA,IAAMa,uBAAuB,GAAG,SAA1BA,uBAA0B;AAAA,SACrCC,MAAM,CAACC,OAAP,CAAeV,IAAf,EAAqBW,MAArB,CAA4B,UAACC,GAAD,QAAgC;AAAA;AAAA,QAAzBN,SAAyB;AAAA,QAAdO,QAAc;;AAC1DD,IAAAA,GAAG,CAACE,IAAJ,OAAAF,GAAG,qBACEC,QAAQ,CAACE,GAAT,CAAa,UAACnB,OAAD;AAAA;AACdU,QAAAA,SAAS,EAATA;AADc,SAEXV,OAFW;AAAA,KAAb,CADF,EAAH;AAOA,WAAOgB,GAAP;AACD,GATD,EASG,EATH,CADqC;AAAA,CAAhC","sourcesContent":["import messageTypes from './messagesTypes';\n\nconst endOfConversationMessage = {\n  message: '---- conversation finished ----',\n  type: messageTypes.client,\n};\n\nconst data = {\n  'THIS-IS-AN-ACCOUNT-ID': [\n    {\n      message: 'this is a user message',\n      type: messageTypes.user,\n      accountName: 'SOME Account 1',\n    },\n    {\n      message: 'this is a user message',\n      type: messageTypes.client,\n      accountName: 'SOME Account 2',\n    },\n  ],\n};\n\nexport const addMessage = () => {};\n\nexport const createNewConversation = () => {};\n\nexport const getAllMessagesForUser = (accountId) => {\n  if (!data[accountId]) {\n    return [];\n  }\n\n  return data[accountId].concat(endOfConversationMessage);\n};\n\nexport const getAllMessagesForClient = () =>\n  Object.entries(data).reduce((acc, [accountId, messages]) => {\n    acc.push(\n      ...messages.map((message) => ({\n        accountId,\n        ...message,\n      })),\n    );\n\n    return acc;\n  }, []);\n"],"file":"messages.js"}